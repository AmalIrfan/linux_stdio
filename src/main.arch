/*
int hash(const char* s) {
	int i = 0;
	int h = 0;
	while (s[i]) {
		h = h * 33 + s[i];
		i++;
	}
	return h;
}

int num(const char* s) {
	int i = 0;
	while(s++) {
		i = i * 10 + ((*s) - '0');
	}
	return i;
}

char* str(int x) {
	static char buf[16];
	int i = 14;
	do {
		buf[i] = (x % 10) + '0';
		x = x / 10;
		i--;
	} while (x && i >= 0);
	return buf + i + 1;
}
#define MAPSIZE 1000

int main() {
	struct {
		char s[20];
		int v;
	} map[MAPSIZE] = {0};
	char *inp = 0;
	int h = 0;

	gets(&inp);
	h = hash(inp) % MAPSIZE;
	strcpy(map[h].s, inp);
	map[h].v = 1;

	gets(&inp);
	h = hash(inp) % MAPSIZE;
	if (map[h].v)
		puts(map[h].s, -1);
	return 0;
}
*/
